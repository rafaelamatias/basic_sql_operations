# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JZfg29z5BJoSLaCYwPCdy1qvKA6dm1pQ

# Basic SQL Operations
"""

import sqlite3  # Importing the necessary library
import pandas as pd

from google.colab import files
uploaded = files.upload()

# Reading the uploaded CSV file
df_sales = pd.read_csv("SALES_TABLE.csv", delimiter=',')

# Creating the database in memory and loading the table
conn = sqlite3.connect(':memory:')
df_sales.to_sql('sales_table', conn, index=False, if_exists='replace')

# Creating the database in memory and loading the table
conn = sqlite3.connect(':memory:')
df_sales.to_sql('sales_table', conn, index=False, if_exists='replace')

# Function to execute SQL queries
def run_query(query):
    return pd.read_sql_query(query, conn)

"""# 1) Write a query that returns the distinct product names we have in the sales database."""

query = """
SELECT DISTINCT PRODUCT

FROM sales_table

"""
result_df = run_query(query)
print(result_df)

"""# 2) Write a query that returns the count of distinct clients we have in our database. Don't forget to rename your column."""

query = """
SELECT DISTINCT(count(CLIENT_ID)) AS ClientCount
FROM sales_table
"""
result_df = run_query(query)
print(result_df)

"""# 3) Write a query that returns a column with the distinct products and the unit value (UNIT_VALUE) of each product. However, only for products where the unit value is greater than or equal to 50."""

query = """
SELECT DISTINCT PRODUCT,
       UNIT_VALUE
FROM sales_table
WHERE UNIT_VALUE >= 50
"""
result_df = run_query(query)
print(result_df)

"""# 4) Write a query that returns the purchase IDs and the total amount spent on that purchase (UNIT_VALUE X UNITS) for the 5 purchases with the highest total amount spent."""

query = """
SELECT PURCHASE_ID,
       (UNIT_VALUE * UNITS) AS TOTAL_SPENT
FROM sales_table
ORDER BY TOTAL_SPENT DESC
LIMIT 5
"""
result_df = run_query(query)
print(result_df)

"""# 5) Write a query that returns the products and the average unit price of the products, ordering from highest to lowest."""

query = """
SELECT PRODUCT,
       avg(UNIT_VALUE) AS AveragePrice
FROM sales_table
GROUP BY PRODUCT
ORDER BY AveragePrice DESC
"""
result_df = run_query(query)
print(result_df)

"""# 6) Write a query that returns the clients and the number of purchases they made. Show only the top 3 clients with the highest number of purchases."""

query = """
SELECT CLIENT_ID,
       count(*) AS PurchaseCount
FROM sales_table
GROUP BY CLIENT_ID
ORDER BY PurchaseCount DESC
LIMIT 3
"""
result_df = run_query(query)
print(result_df)